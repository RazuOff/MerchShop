// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	models "github.com/RazuOff/MerchShop/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUsers) GetUserByID(userID int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUsersMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUsers)(nil).GetUserByID), userID)
}

// GetUserByUsername mocks base method.
func (m *MockUsers) GetUserByUsername(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUsersMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUsers)(nil).GetUserByUsername), username)
}

// GetUsernameByID mocks base method.
func (m *MockUsers) GetUsernameByID(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsernameByID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsernameByID indicates an expected call of GetUsernameByID.
func (mr *MockUsersMockRecorder) GetUsernameByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsernameByID", reflect.TypeOf((*MockUsers)(nil).GetUsernameByID), userID)
}

// SetUser mocks base method.
func (m *MockUsers) SetUser(username, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", username, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUser indicates an expected call of SetUser.
func (mr *MockUsersMockRecorder) SetUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockUsers)(nil).SetUser), username, password)
}

// UpdateUsers mocks base method.
func (m *MockUsers) UpdateUsers(users ...*models.User) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range users {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUsers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsers indicates an expected call of UpdateUsers.
func (mr *MockUsersMockRecorder) UpdateUsers(users ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsers", reflect.TypeOf((*MockUsers)(nil).UpdateUsers), users...)
}

// MockHistory is a mock of History interface.
type MockHistory struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryMockRecorder
}

// MockHistoryMockRecorder is the mock recorder for MockHistory.
type MockHistoryMockRecorder struct {
	mock *MockHistory
}

// NewMockHistory creates a new mock instance.
func NewMockHistory(ctrl *gomock.Controller) *MockHistory {
	mock := &MockHistory{ctrl: ctrl}
	mock.recorder = &MockHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistory) EXPECT() *MockHistoryMockRecorder {
	return m.recorder
}

// AddHistory mocks base method.
func (m *MockHistory) AddHistory(history *models.TransactionsHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHistory", history)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHistory indicates an expected call of AddHistory.
func (mr *MockHistoryMockRecorder) AddHistory(history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHistory", reflect.TypeOf((*MockHistory)(nil).AddHistory), history)
}

// GetUserHistory mocks base method.
func (m *MockHistory) GetUserHistory(user *models.User) ([]models.TransactionsHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHistory", user)
	ret0, _ := ret[0].([]models.TransactionsHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHistory indicates an expected call of GetUserHistory.
func (mr *MockHistoryMockRecorder) GetUserHistory(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHistory", reflect.TypeOf((*MockHistory)(nil).GetUserHistory), user)
}

// MockMerch is a mock of Merch interface.
type MockMerch struct {
	ctrl     *gomock.Controller
	recorder *MockMerchMockRecorder
}

// MockMerchMockRecorder is the mock recorder for MockMerch.
type MockMerchMockRecorder struct {
	mock *MockMerch
}

// NewMockMerch creates a new mock instance.
func NewMockMerch(ctrl *gomock.Controller) *MockMerch {
	mock := &MockMerch{ctrl: ctrl}
	mock.recorder = &MockMerchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerch) EXPECT() *MockMerchMockRecorder {
	return m.recorder
}

// BuyMerch mocks base method.
func (m *MockMerch) BuyMerch(merch *models.Merch, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyMerch", merch, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyMerch indicates an expected call of BuyMerch.
func (mr *MockMerchMockRecorder) BuyMerch(merch, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyMerch", reflect.TypeOf((*MockMerch)(nil).BuyMerch), merch, user)
}

// GetMerchByName mocks base method.
func (m *MockMerch) GetMerchByName(itemName string) (*models.Merch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchByName", itemName)
	ret0, _ := ret[0].(*models.Merch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchByName indicates an expected call of GetMerchByName.
func (mr *MockMerchMockRecorder) GetMerchByName(itemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchByName", reflect.TypeOf((*MockMerch)(nil).GetMerchByName), itemName)
}

// GetUserMerchAmount mocks base method.
func (m *MockMerch) GetUserMerchAmount(user *models.User, merch *models.Merch) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMerchAmount", user, merch)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMerchAmount indicates an expected call of GetUserMerchAmount.
func (mr *MockMerchMockRecorder) GetUserMerchAmount(user, merch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMerchAmount", reflect.TypeOf((*MockMerch)(nil).GetUserMerchAmount), user, merch)
}

// GetUsersMerch mocks base method.
func (m *MockMerch) GetUsersMerch(user *models.User) ([]models.Merch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersMerch", user)
	ret0, _ := ret[0].([]models.Merch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersMerch indicates an expected call of GetUsersMerch.
func (mr *MockMerchMockRecorder) GetUsersMerch(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersMerch", reflect.TypeOf((*MockMerch)(nil).GetUsersMerch), user)
}
