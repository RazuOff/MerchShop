// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	config "github.com/RazuOff/MerchShop/internal/config"
	models "github.com/RazuOff/MerchShop/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockAuth) GenerateToken(username string, userID int, config config.Config) (string, *models.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, userID, config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*models.ServiceError)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthMockRecorder) GenerateToken(username, userID, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuth)(nil).GenerateToken), username, userID, config)
}

// RegistrateOrLogin mocks base method.
func (m *MockAuth) RegistrateOrLogin(username, password string) (*models.User, *models.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrateOrLogin", username, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*models.ServiceError)
	return ret0, ret1
}

// RegistrateOrLogin indicates an expected call of RegistrateOrLogin.
func (mr *MockAuthMockRecorder) RegistrateOrLogin(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrateOrLogin", reflect.TypeOf((*MockAuth)(nil).RegistrateOrLogin), username, password)
}

// MockInfo is a mock of Info interface.
type MockInfo struct {
	ctrl     *gomock.Controller
	recorder *MockInfoMockRecorder
}

// MockInfoMockRecorder is the mock recorder for MockInfo.
type MockInfoMockRecorder struct {
	mock *MockInfo
}

// NewMockInfo creates a new mock instance.
func NewMockInfo(ctrl *gomock.Controller) *MockInfo {
	mock := &MockInfo{ctrl: ctrl}
	mock.recorder = &MockInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfo) EXPECT() *MockInfoMockRecorder {
	return m.recorder
}

// GenerateInfo mocks base method.
func (m *MockInfo) GenerateInfo(userID int) (*models.HistoryResponse, *models.ServiceError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInfo", userID)
	ret0, _ := ret[0].(*models.HistoryResponse)
	ret1, _ := ret[1].(*models.ServiceError)
	return ret0, ret1
}

// GenerateInfo indicates an expected call of GenerateInfo.
func (mr *MockInfoMockRecorder) GenerateInfo(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInfo", reflect.TypeOf((*MockInfo)(nil).GenerateInfo), userID)
}

// MockCoin is a mock of Coin interface.
type MockCoin struct {
	ctrl     *gomock.Controller
	recorder *MockCoinMockRecorder
}

// MockCoinMockRecorder is the mock recorder for MockCoin.
type MockCoinMockRecorder struct {
	mock *MockCoin
}

// NewMockCoin creates a new mock instance.
func NewMockCoin(ctrl *gomock.Controller) *MockCoin {
	mock := &MockCoin{ctrl: ctrl}
	mock.recorder = &MockCoinMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoin) EXPECT() *MockCoinMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockCoin) BuyItem(itemName string, userID int) *models.ServiceError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", itemName, userID)
	ret0, _ := ret[0].(*models.ServiceError)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockCoinMockRecorder) BuyItem(itemName, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockCoin)(nil).BuyItem), itemName, userID)
}

// SendCoins mocks base method.
func (m *MockCoin) SendCoins(fromUserID int, toUserLogin string, amount int) *models.ServiceError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", fromUserID, toUserLogin, amount)
	ret0, _ := ret[0].(*models.ServiceError)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockCoinMockRecorder) SendCoins(fromUserID, toUserLogin, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockCoin)(nil).SendCoins), fromUserID, toUserLogin, amount)
}
